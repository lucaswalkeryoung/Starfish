# -------------------------------------------------------------------------------------------------
# ------------------------------- Platform :: Compiler :: Assembler -------------------------------
# -------------------------------------------------------------------------------------------------
from Visitors.Context  import Context
from Visitors.Visitor  import Visitor
from Taxonomy.Taxonomy import *


# -------------------------------------------------------------------------------------------------
# ------------------------------------- Visitor :: Assembler --------------------------------------
# -------------------------------------------------------------------------------------------------
class Assembler(Visitor):

    # -----------------------------------------------------------------------------------------
    # -------------------------- COMPILER :: Default Assembly Method --------------------------
    # -----------------------------------------------------------------------------------------
    def visit_node(self, node: Node, context: Context) -> Node:

        for component in node.components:
            component.visit(self, context.descend())


    # -----------------------------------------------------------------------------------------
    # ---------------------------- ENTRY :: Assembler Entry Point -----------------------------
    # -----------------------------------------------------------------------------------------
    @staticmethod
    def assemble(node: World) -> World:
        return node.visit(Assembler(), Context())