# -------------------------------------------------------------------------------------------------
# ------------------------------ Visitors :: Visitor Context Helper -------------------------------
# -------------------------------------------------------------------------------------------------
from collections import ChainMap

from typing import ItemsView
from typing import Iterator
from typing import KeysView
from typing import Mapping
from typing import Optional
from typing import ValuesView


# -------------------------------------------------------------------------------------------------
# ----------------------------------- Helper :: Visitor Context -----------------------------------
# -------------------------------------------------------------------------------------------------
class Context(Mapping[str, object]):

    def __iter__(self):
        pass

    # -----------------------------------------------------------------------------------------
    # --------------------------------- CONSTRUCTOR :: Constructor ----------------------------
    # -----------------------------------------------------------------------------------------
    def __init__(self, parent: Optional['Context'] = None, **context: object) -> None:

        self.parent   = parent
        self.children = []
        self.context  = context


    # -----------------------------------------------------------------------------------------
    # ------------------------------- METHOD :: Create Child Context --------------------------
    # -----------------------------------------------------------------------------------------
    def descend(self) -> 'Context':
        self.children.append(child := Context(self)); return child


    # -----------------------------------------------------------------------------------------
    # ----------------------------- METHOD :: Capture Context Ancestry ------------------------
    # -----------------------------------------------------------------------------------------
    def ascend(self) -> ChainMap[str, object]:

        ancestor = self
        ancestry = []

        while ancestor:
            ancestry.append(ancestor.context)
            ancestor = ancestor.parent

        return ChainMap(*ancestry)


    # -----------------------------------------------------------------------------------------
    # --------------------------------- OPERATOR :: Get Item ----------------------------------
    # -----------------------------------------------------------------------------------------
    def __getitem__(self, key: str) -> object:
        return self.ascend()[key]


    # -----------------------------------------------------------------------------------------
    # --------------------------------- OPERATOR :: Get Item ----------------------------------
    # -----------------------------------------------------------------------------------------
    def __setitem__(self, key: str, value: object) -> None:
        self.context[key] = value


    # -----------------------------------------------------------------------------------------
    # ---------------------------- OPERATOR :: Membership Testing -----------------------------
    # -----------------------------------------------------------------------------------------
    def __contains__(self, key: int) -> bool:
        return key in self.ascend()


    # -----------------------------------------------------------------------------------------
    # --------------------------- OPERATOR :: Iterate through Keys ----------------------------
    # -----------------------------------------------------------------------------------------
    def __bool__(self) -> bool:
        return bool(self.self.ascend())


    # -----------------------------------------------------------------------------------------
    # -------------------------------- OPERATOR :: Get Length ---------------------------------
    # -----------------------------------------------------------------------------------------
    def __len__(self) -> int:
        return len(self.self.ascend())


    # -----------------------------------------------------------------------------------------
    # --------------------------- OPERATOR :: Iterate through Keys ----------------------------
    # -----------------------------------------------------------------------------------------
    def __iter__(self) -> Iterator[str]:
        return iter(self.context.keys())


    # -----------------------------------------------------------------------------------------
    # ---------------------------- METHOD :: Get Item with Default ----------------------------
    # -----------------------------------------------------------------------------------------
    def get(self, key: str, default: object = None) -> object:
        return self.ascend().get(key, default)


    # -----------------------------------------------------------------------------------------
    # ---------------------------- METHOD :: Get Item with Default ----------------------------
    # -----------------------------------------------------------------------------------------
    def set(self, key: str, value: object) -> object:
        self.context[key] = value; return value


    # -----------------------------------------------------------------------------------------
    # ---------------------------------- METHOD :: Get Items ----------------------------------
    # -----------------------------------------------------------------------------------------
    def items(self) -> ItemsView[str, object]:
        return self.self.ascend().items()


    # -----------------------------------------------------------------------------------------
    # ---------------------------------- METHOD :: Get Keys -----------------------------------
    # -----------------------------------------------------------------------------------------
    def keys(self) -> KeysView[str]:
        return self.self.ascend().items()


    # -----------------------------------------------------------------------------------------
    # --------------------------------- METHOD :: Get Values ----------------------------------
    # -----------------------------------------------------------------------------------------
    def values(self) -> ValuesView[object]:
        return self.self.ascend().items()
