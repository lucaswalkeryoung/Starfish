# colors = [
#     'white',
#     'blue',
#     'black',
#     'red',
#     'green',
#     'colorless',
#     'generic',
# ]
#
# colors = zip(colors, colors)
#
# archetypes_singular = [
#     'ability',
#     'card',
#     'counter',
#     'damage',
#     'effect',
#     'emblem',
#     'keyword',
#     'mana',
#     'permanent',
#     'player',
#     'spell',
#     'token',
#     'zone'
# ]
#
# archetypes_plural = [
#     'abilities',
#     'cards',
#     'counters',
#     'damage',
#     'effects',
#     'emblems',
#     'keywords',
#     'mana',
#     'permanents',
#     'players',
#     'spells',
#     'tokens',
#     'zones'
# ]
#
# archetypes = list(zip(archetypes_singular, archetypes_plural))
#
# supertypes_singular = [
#     'basic',
#     'legendary',
#     'ongoing',
#     'snow',
#     'world',
# ]
#
# supertypes_plural = [
#     'basics',
#     'legendaries',
#     'ongoings',
#     'snows',
#     'worlds',
# ]
#
# supertypes = list(zip(supertypes_singular, supertypes_plural))
#
# types_singular = [
#     'artifact',
#     'battle',
#     'conspiracy',
#     'creature',
#     'dungeon',
#     'enchantment',
#     'instant',
#     'land',
#     'phenomenon',
#     'plane',
#     'planeswalker',
#     'scheme',
#     'sorcery',
#     'tribal',
#     'vanguard',
# ]
#
# types_plural = [
#     'artifacts',
#     'battles',
#     'conspiracies',
#     'creatures',
#     'dungeons',
#     'enchantments',
#     'instants',
#     'lands',
#     'phenomena',
#     'planes',
#     'planeswalkers',
#     'schemes',
#     'sorceries',
#     'tribals',
#     'vanguards',
# ]
#
# types = list(zip(types_singular, types_plural))
#
#
# tribes_singular = [
#     'advisor',
#     'aetherborn',
#     'alien',
#     'ally',
#     'angel',
#     'antelope',
#     'ape',
#     'archer',
#     'archon',
#     'armadillo',
#     'army',
#     'artificer',
#     'assassin',
#     'assembly-worker',
#     'astartes',
#     'atog',
#     'aurochs',
#     'avatar',
#     'azra',
#     'badger',
#     'balloon',
#     'barbarian',
#     'bard',
#     'basilisk',
#     'bat',
#     'bear',
#     'beast',
#     'beaver',
#     'beeble',
#     'beholder',
#     'berserker',
#     'bird',
#     'blinkmoth',
#     'boar',
#     'bringer',
#     'brushwagg',
#     'camarid',
#     'camel',
#     'capybara',
#     'caribou',
#     'carrier',
#     'cat',
#     'centaur',
#     'cephalid',
#     'chimera',
#     'citizen',
#     'cleric',
#     'clown',
#     'cockatrice',
#     'construct',
#     'coward',
#     'crab',
#     'crocodile',
#     'ctan',
#     'custodes',
#     'cyberman',
#     'cyclops',
#     'dalek',
#     'dauthi',
#     'demigod',
#     'demon',
#     'deserter',
#     'detective',
#     'devil',
#     'dinosaur',
#     'djinn',
#     'doctor',
#     'dog',
#     'dragon',
#     'drake',
#     'dreadnought',
#     'drone',
#     'druid',
#     'dryad',
#     'dwarf',
#     'efreet',
#     'egg',
#     'elder',
#     'eldrazi',
#     'elemental',
#     'elephant',
#     'elf',
#     'elk',
#     'employee',
#     'eye',
#     'faerie',
#     'ferret',
#     'fish',
#     'flagbearer',
#     'fox',
#     'fractal',
#     'frog',
#     'fungus',
#     'gamer',
#     'gargoyle',
#     'germ',
#     'giant',
#     'gith',
#     'glimmer',
#     'gnoll',
#     'gnome',
#     'goat',
#     'goblin',
#     'god',
#     'golem',
#     'gorgon',
#     'graveborn',
#     'gremlin',
#     'griffin',
#     'guest',
#     'hag',
#     'halfling',
#     'hamster',
#     'harpy',
#     'hellion',
#     'hippo',
#     'hippogriff',
#     'homarid',
#     'homunculus',
#     'horror',
#     'horse',
#     'human',
#     'hydra',
#     'hyena',
#     'illusion',
#     'imp',
#     'incarnation',
#     'inkling',
#     'inquisitor',
#     'insect',
#     'jackal',
#     'jellyfish',
#     'juggernaut',
#     'kavu',
#     'kirin',
#     'kithkin',
#     'knight',
#     'kobold',
#     'kor',
#     'kraken',
#     'lamia',
#     'lammasu',
#     'leech',
#     'leviathan',
#     'lhurgoyf',
#     'licid',
#     'lizard',
#     'llama',
#     'manticore',
#     'masticore',
#     'mercenary',
#     'merfolk',
#     'metathran',
#     'minion',
#     'minotaur',
#     'mite',
#     'mole',
#     'monger',
#     'mongoose',
#     'monk',
#     'monkey',
#     'moonfolk',
#     'mount',
#     'mouse',
#     'mutant',
#     'myr',
#     'mystic',
#     'nautilus',
#     'necron',
#     'nephilim',
#     'nightmare',
#     'nightstalker',
#     'ninja',
#     'noble',
#     'noggle',
#     'nomad',
#     'nymph',
#     'octopus',
#     'ogre',
#     'ooze',
#     'orb',
#     'orc',
#     'orgg',
#     'otter',
#     'ouphe',
#     'ox',
#     'oyster',
#     'pangolin',
#     'peasant',
#     'pegasus',
#     'pentavite',
#     'performer',
#     'pest',
#     'phelddagrif',
#     'phoenix',
#     'phyrexian',
#     'pilot',
#     'pincher',
#     'pirate',
#     'plant',
#     'porcupine',
#     'possum',
#     'praetor',
#     'primarch',
#     'prism',
#     'processor',
#     'rabbit',
#     'raccoon',
#     'ranger',
#     'rat',
#     'rebel',
#     'reflection',
#     'rhino',
#     'rigger',
#     'robot',
#     'rogue',
#     'sable',
#     'salamander',
#     'samurai',
#     'sand',
#     'saproling',
#     'satyr',
#     'scarecrow',
#     'scientist',
#     'scion',
#     'scorpion',
#     'scout',
#     'sculpture',
#     'serf',
#     'serpent',
#     'servo',
#     'shade',
#     'shaman',
#     'shapeshifter',
#     'shark',
#     'sheep',
#     'siren',
#     'skeleton',
#     'skunk',
#     'slith',
#     'sliver',
#     'sloth',
#     'slug',
#     'snail',
#     'snake',
#     'soldier',
#     'soltari',
#     'spawn',
#     'specter',
#     'spellshaper',
#     'sphinx',
#     'spider',
#     'spike',
#     'spirit',
#     'splinter',
#     'sponge',
#     'squid',
#     'squirrel',
#     'starfish',
#     'surrakar',
#     'survivor',
#     'synth',
#     'tentacle',
#     'tetravite',
#     'thalakos',
#     'thopter',
#     'thrull',
#     'tiefling',
#     'toy',
#     'treefolk',
#     'trilobite',
#     'triskelavite',
#     'troll',
#     'turtle',
#     'tyranid',
#     'unicorn',
#     'vampire',
#     'varmint',
#     'vedalken',
#     'volver',
#     'wall',
#     'walrus',
#     'warlock',
#     'warrior',
#     'weasel',
#     'weird',
#     'werewolf',
#     'whale',
#     'wizard',
#     'wolf',
#     'wolverine',
#     'wombat',
#     'worm',
#     'wraith',
#     'wurm',
#     'yeti',
#     'zombie',
#     'zubera',
# ]
#
# tribes_plural = [
#     'advisors',
#     'aetherborn',
#     'aliens',
#     'allies',
#     'angels',
#     'antelopes',
#     'apes',
#     'archers',
#     'archons',
#     'armadillos',
#     'armies',
#     'artificers',
#     'assassins',
#     'assembly-workers',
#     'astartes',
#     'atogs',
#     'aurochs',
#     'avatars',
#     'azra',
#     'badgers',
#     'balloons',
#     'barbarians',
#     'bards',
#     'basilisks',
#     'bats',
#     'bears',
#     'beasts',
#     'beavers',
#     'beebles',
#     'beholders',
#     'berserkers',
#     'birds',
#     'blinkmoths',
#     'boars',
#     'bringers',
#     'brushwaggs',
#     'camarids',
#     'camels',
#     'capybaras',
#     'caribous',
#     'carriers',
#     'cats',
#     'centaurs',
#     'cephalids',
#     'chimeras',
#     'citizens',
#     'clerics',
#     'clowns',
#     'cockatrices',
#     'constructs',
#     'cowards',
#     'crabs',
#     'crocodiles',
#     'ctans',
#     'custodes',
#     'cybermen',
#     'cyclopes',
#     'daleks',
#     'dauthi',
#     'demigods',
#     'demons',
#     'deserters',
#     'detectives',
#     'devils',
#     'dinosaurs',
#     'djinns',
#     'doctors',
#     'dogs',
#     'dragons',
#     'drakes',
#     'dreadnoughts',
#     'drones',
#     'druids',
#     'dryads',
#     'dwarves',
#     'efreets',
#     'eggs',
#     'elders',
#     'eldrazi',
#     'elementals',
#     'elephants',
#     'elves',
#     'elks',
#     'employees',
#     'eyes',
#     'faeries',
#     'ferrets',
#     'fish',
#     'flagbearers',
#     'foxes',
#     'fractals',
#     'frogs',
#     'fungi',
#     'gamers',
#     'gargoyles',
#     'germs',
#     'giants',
#     'gith',
#     'glimmers',
#     'gnolls',
#     'gnomes',
#     'goats',
#     'goblins',
#     'gods',
#     'golems',
#     'gorgons',
#     'graveborn',
#     'gremlins',
#     'griffins',
#     'guests',
#     'hags',
#     'halflings',
#     'hamsters',
#     'harpies',
#     'hellions',
#     'hippos',
#     'hippogriffs',
#     'homarids',
#     'homunculi',
#     'horrors',
#     'horses',
#     'humans',
#     'hydras',
#     'hyenas',
#     'illusions',
#     'imps',
#     'incarnations',
#     'inklings',
#     'inquisitors',
#     'insects',
#     'jackals',
#     'jellyfish',
#     'juggernauts',
#     'kavus',
#     'kirin',
#     'kithkin',
#     'knights',
#     'kobolds',
#     'kor',
#     'krakens',
#     'lamia',
#     'lammasu',
#     'leeches',
#     'leviathans',
#     'lhurgoyfs',
#     'licids',
#     'lizards',
#     'llamas',
#     'manticores',
#     'masticores',
#     'mercenaries',
#     'merfolk',
#     'metathran',
#     'minions',
#     'minotaurs',
#     'mites',
#     'moles',
#     'mongers',
#     'mongooses',
#     'monks',
#     'monkeys',
#     'moonfolk',
#     'mounts',
#     'mice',
#     'mutants',
#     'myr',
#     'mystics',
#     'nautili',
#     'necrons',
#     'nephilim',
#     'nightmares',
#     'nightstalkers',
#     'ninjas',
#     'nobles',
#     'noggles',
#     'nomads',
#     'nymphs',
#     'octopuses',
#     'ogres',
#     'oozes',
#     'orbs',
#     'orcs',
#     'orggs',
#     'otters',
#     'ouphes',
#     'oxen',
#     'oysters',
#     'pangolins',
#     'peasants',
#     'pegasi',
#     'pentavites',
#     'performers',
#     'pests',
#     'phelddagrifs',
#     'phoenixes',
#     'phyrexians',
#     'pilots',
#     'pinchers',
#     'pirates',
#     'plants',
#     'porcupines',
#     'possums',
#     'praetors',
#     'primarchs',
#     'prisms',
#     'processors',
#     'rabbits',
#     'raccoons',
#     'rangers',
#     'rats',
#     'rebels',
#     'reflections',
#     'rhinos',
#     'riggers',
#     'robots',
#     'rogues',
#     'sables',
#     'salamanders',
#     'samurai',
#     'sands',
#     'saprolings',
#     'satyrs',
#     'scarecrows',
#     'scientists',
#     'scions',
#     'scorpions',
#     'scouts',
#     'sculptures',
#     'serfs',
#     'serpents',
#     'servos',
#     'shades',
#     'shamans',
#     'shapeshifters',
#     'sharks',
#     'sheep',
#     'sirens',
#     'skeletons',
#     'skunks',
#     'sliths',
#     'slivers',
#     'sloths',
#     'slugs',
#     'snails',
#     'snakes',
#     'soldiers',
#     'soltari',
#     'spawns',
#     'specters',
#     'spellshapers',
#     'sphinxes',
#     'spiders',
#     'spikes',
#     'spirits',
#     'splinters',
#     'sponges',
#     'squids',
#     'squirrels',
#     'starfish',
#     'surrakars',
#     'survivors',
#     'synths',
#     'tentacles',
#     'tetravites',
#     'thalakos',
#     'thopters',
#     'thrulls',
#     'tieflings',
#     'toys',
#     'treefolk',
#     'trilobites',
#     'triskelavites',
#     'trolls',
#     'turtles',
#     'tyranids',
#     'unicorns',
#     'vampires',
#     'varmints',
#     'vedalken',
#     'volvers',
#     'walls',
#     'walruses',
#     'warlocks',
#     'warriors',
#     'weasels',
#     'weirds',
#     'werewolves',
#     'whales',
#     'wizards',
#     'wolves',
#     'wolverines',
#     'wombats',
#     'worms',
#     'wraiths',
#     'wurms',
#     'yetis',
#     'zombies',
#     'zuberas',
# ]
#
# tribes = list(zip(tribes_singular, tribes_plural))
#
# edges = [
# ]
#
# basics = [
#     ('plains', 'plains'),
#     ('island', 'islands'),
#     ('swamp', 'swamps'),
#     ('mountain', 'mountains'),
#     ('swamp', 'swamps'),
#     ('waste', 'wastes'),
# ]
#
# nonbasics = [
#
#     ('plains', 'plains'),
#     ('island', 'islands'),
#     ('swamp', 'swamps'),
#     ('mountain', 'mountains'),
#     ('swamp', 'swamps'),
#     ('waste', 'wastes'),
#
#     ('cave', 'caves'),
#     ('desert', 'deserts'),
#     ('gate', 'gates'),
#     ('lair', 'lairs'),
#     ('locus', 'locus'),
#     ('mine', 'mines'),
#     ('powerplant', 'powerplants'),
#     ('sphere', 'spheres'),
#     ('tower', 'towers'),
#     ('urzas', 'urzas'),
#
# ]
# edges = list(zip(edges, edges))
# #
# # import pathlib
# #
# # files = sorted(pathlib.Path('Ontology/Shorthand').glob('*.py'))
# #
# # lines = []
# # max_len = 0
# #
# # # First, build the from... line and track the max length
# # for file in files:
# #     module = f'Engine.Ontology.Shorthand.{file.stem}'
# #     symbol = file.stem
# #     line = f'from {module} import {symbol}'
# #     lines.append((module, symbol))
# #     max_len = max(max_len, len(f'from {module}'))
# #
# # # Now, align the imports
# # for module, symbol in lines:
# #     print(f'from {module:<{max_len - 6}} import {symbol}')
#
#
# planeswalkers = [
#     'ajani',
#     'aminatou',
#     'angrath',
#     'arlin',
#     'ashiok',
#     'bahamut',
#     'basri',
#     'bolas',
#     'calix',
#     'chandra',
#     'comet',
#     'dack',
#     'dakkon',
#     'daretti',
#     'davriel',
#     'dihada',
#     'domri',
#     'dovin',
#     'ellywick',
#     'elminster',
#     'elspeth',
#     'estrid',
#     'freyalise',
#     'garruk',
#     'gideon',
#     'grist',
#     'guff',
#     'huatli',
#     'jace',
#     'jared',
#     'jaya',
#     'jeska',
#     'kaito',
#     'karn',
#     'kasmina',
#     'kaya',
#     'kiora',
#     'koth',
#     'liliana',
#     'lolth',
#     'lukka',
#     'minsc',
#     'mordenkainen',
#     'nahiri',
#     'narset',
#     'niko',
#     'nissa',
#     'nixilis',
#     'oko',
#     'ral',
#     'rowan',
#     'saheeli',
#     'samut',
#     'sarkhan',
#     'serra',
#     'sivitri',
#     'sorin',
#     'szat',
#     'tamiyo',
#     'tasha',
#     'teferi',
#     'teyo',
#     'tezzeret',
#     'tibalt',
#     'tyvar',
#     'ugin',
#     'urza',
#     'venser',
#     'vivien',
#     'vraska',
#     'vronos',
#     'will',
#     'windgrace',
#     'wrenn',
#     'xenagos',
#     'yanggu',
#     'yanling',
#     'zariel',
# ]
#
# others_singular = [
#     'aura',
#     'background',
#     'cartouche',
#     'class',
#     'curse',
#     'role',
#     'room',
#     'rune',
#     'saga',
#     'shard',
#     'shrine',
#     'clue',
#     'contraption',
#     'equipment',
#     'food',
#     'fortification',
#     'gold',
#     'powerstone',
#     'treasure',
#     'vehicle',
#     'adventure',
#     'arcane',
#     'lesson',
#     'omen',
#     'trap',
#     'scheme',
#     'phenomenon',
#     'vanguard',
# ]
#
# others_plural = [
#     'aura',
#     'backgrounds',
#     'cartouches',
#     'classes',
#     'curses',
#     'roles',
#     'rooms',
#     'runes',
#     'sagas',
#     'shards',
#     'shrines',
#     'clues',
#     'contraptions',
#     'equipment',
#     'food',
#     'fortifications',
#     'gold',
#     'powerstones',
#     'treasure',
#     'vehicles',
#     'adventures',
#     'arcane',
#     'lessons',
#     'omens',
#     'traps',
#     'schemes',
#     'phenomenea',
#     'vanguard',
# ]
#
# ops = [
#     'tap',
#     'pay',
# ]
#
# ideas = [
#     'mana',
#     'life',
# ]
#
# durations = [
#     'endofturn',
#     'nextturn',
#     'indefinite',
#     'while-attached',
# ]
#
# edges = [
#     'controlled',
#     'controllers',
#     'owned',
#     'owners',
#     'attached',
#     'attaching',
# ]
#
# import pathlib
#
# for singular, plural in zip(others_singular, others_plural):
#
#     file = pathlib.Path(f'Ontology/Shorthand/Subtypes/Others/{plural.title()}.py')
#
#     title = f'{f" Ontology :: Shorthand :: Subtypes :: Others :: {file.stem} ":-^97}'
#     subtitle = f'{f" Shorthand :: {file.stem} ":-^97}'
#
#     raw = f"""
# # -------------------------------------------------------------------------------------------------
# # { title }
# # -------------------------------------------------------------------------------------------------
# from Ontology.Shorthand.Abstract.Shorthand import Shorthand
# from Ontology.Shorthand.Abstract.Criterand import Criterand
# from Ontology.Abstract.Node import Node
#
# from Ontology.Atoms.Subtype import Subtype
#
# from typing import TYPE_CHECKING
#
# if TYPE_CHECKING:
#     from Visitors.Visitor import Visitor
#     from Visitors.Context import Context
#
# from Taxonomy import Taxonomy
#
#
# # -------------------------------------------------------------------------------------------------
# # { subtitle }
# # -------------------------------------------------------------------------------------------------
# @Taxonomy.register(singular='{singular}', plural='{plural}', atom=Subtype)
# class {file.stem}(Criterand, Shorthand):
#
#     def __init__(self, *components: 'Node', **attributes: int) -> None:
#         super().__init__(*components, **attributes)
#
#     def visit(self, visitor: 'Visitor', context: 'Context') -> '{file.stem}':
#
#         try:
#             return visitor.visit_{plural.lower()}(self, context)
#
#         except AttributeError:
#             return super().visit(visitor, context)
# """
#
#     file.write_text(raw)

import pathlib

for file in sorted(pathlib.Path('Ontology').rglob('*.py')):

    stem = str(file.with_suffix('')).replace('/', '.')
    name = file.stem

    print(f"from {stem} import {name}")